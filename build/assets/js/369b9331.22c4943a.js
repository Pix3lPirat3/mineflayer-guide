"use strict";(self.webpackChunkmineflayer_guide=self.webpackChunkmineflayer_guide||[]).push([[7187],{5177:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>k,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var s=t(5893),r=t(1151);const i={},o="Breaking Blocks",c={id:"snippets/block_break",title:"Breaking Blocks",description:"Targeting Blocks",source:"@site/docs/snippets/block_break.mdx",sourceDirName:"snippets",slug:"/snippets/block_break",permalink:"/snippets/block_break",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/snippets/block_break.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Attack Entities",permalink:"/snippets/attack"},next:{title:"Placing Blocks",permalink:"/snippets/block_place"}},l={},a=[{value:"Targeting Blocks",id:"targeting-blocks",level:2},{value:"Breaking Blocks",id:"breaking-blocks-1",level:2},{value:"Recursive Digging",id:"recursive-digging",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"breaking-blocks",children:"Breaking Blocks"}),"\n",(0,s.jsx)(n.h2,{id:"targeting-blocks",children:"Targeting Blocks"}),"\n",(0,s.jsxs)(n.p,{children:["You can target blocks by using functions such as ",(0,s.jsx)(n.code,{children:"bot.blockAtCursor()"}),", ",(0,s.jsx)(n.code,{children:"bot.findBlock()"}),"/",(0,s.jsx)(n.code,{children:"bot.findBlocks()"}),", ",(0,s.jsx)(n.code,{children:"bot.blockAt(vec3)"}),", and other methods."]}),"\n",(0,s.jsx)(n.h2,{id:"breaking-blocks-1",children:"Breaking Blocks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"copy",children:"let block = bot.blockAtCursor(3.5); // Max Distance: 3.5\r\nif(!block) return console.log('There is no reachable block at my cursor');\r\nbot.dig(bot.blockAtCursor());\n"})}),"\n",(0,s.jsx)(n.h2,{id:"recursive-digging",children:"Recursive Digging"}),"\n",(0,s.jsxs)(n.p,{children:['This is a simple method of "Recursive Digging" (',(0,s.jsx)(n.a,{href:"https://github.com/Pix3lPirat3/mineflayer-consistent-miner/",children:"Consistent Miner by Pix3lPirat3"}),")"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"copy",children:"bot.on('physicsTick', async function() {\r\n    if(bot.targetDigBlock) return;\r\n    let block = bot.blockAtCursor(4.5);\r\n    if(!block) console.log('No block at cursor');\r\n    await bot.dig(block);\r\n});\n"})})]})}function k(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>o});var s=t(7294);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);